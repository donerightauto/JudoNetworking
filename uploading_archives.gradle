apply plugin: 'com.android.library'
apply plugin: 'maven'
apply plugin: 'signing'

def isReleaseBuild() {
    return VERSION_NAME.contains("SNAPSHOT") == false
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

android.libraryVariants.all { variant ->
    def name = variant.buildType.name
    if (!name.equals("debug")) {
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        task.from variant.javaCompile.destinationDir
        task.baseName = BASE_NAME
        task.appendix = APPENDIX
        task.version = VERSION_NAME
        artifacts.add('archives', task);
    }
}

afterEvaluate { project ->
    def isUploadArchiveNeeded = gradle.startParameter.taskNames.contains("uploadArchives")
    if (isUploadArchiveNeeded) {
        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                    pom.groupId = GROUP
                    pom.artifactId = POM_ARTIFACT_ID
                    pom.version = VERSION_NAME

                    repository(url: getReleaseRepositoryUrl()) {
                        authentication(userName: sonatypeUser, password: sonatypePass)
                    }
                    snapshotRepository(url: getSnapshotRepositoryUrl()) {
                        authentication(userName: sonatypeUser, password: sonatypePass)
                    }

                    pom.project {
                        name POM_NAME
                        packaging POM_PACKAGING
                        description POM_DESCRIPTION
                        url POM_URL

                        scm {
                            url POM_SCM_URL
                            connection POM_SCM_CONNECTION
                            developerConnection POM_SCM_DEV_CONNECTION
                        }

                        licenses {
                            license {
                                name POM_LICENCE_NAME
                                url POM_LICENCE_URL
                                distribution POM_LICENCE_DIST
                            }
                        }

                        developers {
                            developer {
                                id POM_DEVELOPER_ID
                                name POM_DEVELOPER_NAME
                            }

                            developer {
                                id POM_DEVELOPER_ID_2
                                name POM_DEVELOPER_NAME_2
                            }
                        }
                    }
                }
            }
        }
        signing {
            required { isReleaseBuild() }
            sign configurations.archives
        }
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        baseName = BASE_NAME
        appendix = APPENDIX
        version = VERSION_NAME
        from androidJavadocs.destinationDir
    }

    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        baseName = BASE_NAME
        appendix = APPENDIX
        version = VERSION_NAME
        from android.sourceSets.main.allSource
    }

    artifacts {
        archives androidJavadocsJar
        archives androidSourcesJar
    }
}